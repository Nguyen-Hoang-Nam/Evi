mod Test do
    import (encode, decode) from Xml
    import * from Base

    fn main() do
        // Type
        tuple = (Ok, 1)
        null = None

        @Int[3]
        integer_array = [1, 2, 3] // Best performance, store all in stack

        @Vec
        integer_vector = [1, 2, 3] // Lower, store all in heap
        object_vector = [1, 1.1, "Hello world"] // Default type of array is Vector

        value = 1
        pointer = *value

        value = 2
        &pointer // 2


        // Pipe
        "John"
        |> format(12)
        |> IO.print()

        2
        |> - 1 // 1

        12
        |> format("John", _)
        |> IO.print()

        ("John", "UK")
        |> three_arguments(_, 12, _)
        |> IO.print()

        // Flow
        "SGVsbG8gd29ybGQ="
        |> Base.decode64()
        |> match do
            (Ok, v) => v end
            (Error, e) => e |> IO.print() end
        end

        cond do
            1 > 2 => "This is never true" end
            true => "This is always true" end
        end

        // Multi
        multi "plus" do
            (_) => 1 + 1 |> Ok.success() end
        end
        |> multi "check" do
            ({"plus": 1}) => 1 |> Ok.wrap() end
            ({"plus": 2}) => None |> Ok.wrap() end
            (_) => "Number is not 2" |> Error.wrap() end
        end
        |> multi "minus" do
            ({"check": v}) => v |> unwrap_or(2) |> - 1 end
        end
        |> match do
            (Ok, {"plus": v}) => v |> Ok.wrap() end
            (Error, _, message) => message |> Error.wrap() end
        end

        // Function
        7
        |> greater_than_five()
        |> match do
            (Ok, v) => v
            (Error, e) => e
        end
        |> IO.print()

        7
        |> greater_than_six()
        |> match do
            (Ok, v) => v
            (Error, e) => e
        end
        |> IO.print()

        // Import
        "John"
        |> Hello.print()
    end

    // Function
    fn greater_than_five(i) do
        cond do
            i > 5 => (Ok, i)
            _ => (Error, "Lower or equal 5")
        end
    end

    fn format(name, age) do
        "name: ${name}, age: ${age}"
    end

    fn three_arguments(name, age, country) do
        "name: ${name}, age: ${age}, country: ${country}"
    end

    // Guard
    fn greater_than_six(i) where i > 6 do
        (Ok, i)
    end

    fn greater_than_six(i) do
        (Ok, "Lower or equal 6")
    end
end
